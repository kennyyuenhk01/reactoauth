{"ast":null,"code":"var _jsxFileName = \"/Users/user2/Documents/hk01/reactoauth/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; //import Amplify from '@aws-amplify/core';\n\nimport { Auth } from 'aws-amplify';\nimport LoginPage from './component/page/login';\nimport ListPage from './component/page/list';\nimport S3Config from './s3Config';\nimport includes from 'ramda/src/includes';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst whiteList = JSON.parse(process.env.REACT_APP_WHITE_LIST);\nconst arr = ['a@a.com', 'b@b.com', 'c@c.com'];\nconst email = 'a@a.com';\nconsole.log(R.includes(email, arr));\n\nfunction App() {\n  _s();\n\n  S3Config(); //console.log('out: '+Checkuser().username);   \n\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    async function checkUser() {\n      try {\n        const currentUser = await Auth.currentUserPoolUser();\n        setUser({\n          username: currentUser.username,\n          ...currentUser.attributes\n        });\n        console.log(currentUser);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    checkUser();\n  }, []);\n\n  if (user) {\n    var whitelistpass = false;\n\n    for (var i = 0; i < whiteList.length; i++) {\n      //console.log(i+\" \"+user.email+\" \"+whiteList[i]);\n      if (user.email === whiteList[i]) {\n        // console.log('you are whitelist user!');\n        whitelistpass = true;\n      }\n    }\n\n    if (whitelistpass) {\n      return /*#__PURE__*/_jsxDEV(ListPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app\",\n        style: {\n          height: \"250px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"menu-circle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-menu\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              href: \"#\",\n              className: \"menu-link is-active\",\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"desc\",\n          children: [user.email, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 46\n          }, this), \"You have no access! Please Login another google account!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this);\n    }\n  } else {\n    return /*#__PURE__*/_jsxDEV(LoginPage, {\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(App, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/user2/Documents/hk01/reactoauth/src/App.js"],"names":["React","useEffect","useState","Auth","LoginPage","ListPage","S3Config","includes","whiteList","JSON","parse","process","env","REACT_APP_WHITE_LIST","arr","email","console","log","R","App","user","setUser","checkUser","currentUser","currentUserPoolUser","username","attributes","error","whitelistpass","i","length","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAO,WAAP;;AAEA,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,OAAO,CAACC,GAAR,CAAYC,oBAAvB,CAAlB;AAEA,MAAMC,GAAG,GAAG,CAAC,SAAD,EAAW,SAAX,EAAqB,SAArB,CAAZ;AACA,MAAMC,KAAK,GAAG,SAAd;AACAC,OAAO,CAACC,GAAR,CAAYC,CAAC,CAACX,QAAF,CAAWQ,KAAX,EAAkBD,GAAlB,CAAZ;;AAGA,SAASK,GAAT,GAAe;AAAA;;AACbb,EAAAA,QAAQ,GADK,CAEb;;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAAC,IAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeqB,SAAf,GAA2B;AACzB,UAAI;AACF,cAAMC,WAAW,GAAG,MAAMpB,IAAI,CAACqB,mBAAL,EAA1B;AACAH,QAAAA,OAAO,CAAC;AAACI,UAAAA,QAAQ,EAAEF,WAAW,CAACE,QAAvB;AAAiC,aAAGF,WAAW,CAACG;AAAhD,SAAD,CAAP;AACAV,QAAAA,OAAO,CAACC,GAAR,CAAYM,WAAZ;AACD,OAJD,CAIE,OAAOI,KAAP,EAAc;AACdX,QAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACD;AACF;;AACDL,IAAAA,SAAS;AACV,GAXQ,EAWN,EAXM,CAAT;;AAaA,MAAGF,IAAH,EAAS;AAEP,QAAIQ,aAAa,GAAG,KAApB;;AAGA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAErB,SAAS,CAACsB,MAA1B,EAAkCD,CAAC,EAAnC,EAAsC;AAEpC;AACA,UAAGT,IAAI,CAACL,KAAL,KAAaP,SAAS,CAACqB,CAAD,CAAzB,EAA6B;AAC3B;AACAD,QAAAA,aAAa,GAAG,IAAhB;AACD;AACF;;AACD,QAAIA,aAAJ,EAAkB;AAChB,0BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cADF;AAGD,KAJD,MAKI;AACF,0BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAqB,QAAA,KAAK,EAAE;AAACG,UAAAA,MAAM,EAAC;AAAR,SAA5B;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,mCACE;AAAQ,cAAA,IAAI,EAAC,GAAb;AAAiB,cAAA,SAAS,EAAC,qBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,qBAAuBX,IAAI,CAACL,KAA5B,oBAAmC;AAAA;AAAA;AAAA;AAAA,kBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAYD;AACF,GAhCD,MAgCO;AACL,wBACE,QAAC,SAAD;AAAW,MAAA,IAAI,EAAEK;AAAjB;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;AACF;;GAvDQD,G;;KAAAA,G;AAyDT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n//import Amplify from '@aws-amplify/core';\nimport { Auth } from 'aws-amplify';\nimport LoginPage from './component/page/login';\nimport ListPage from './component/page/list';\nimport S3Config from './s3Config';\nimport includes from 'ramda/src/includes';\nimport './App.css';\n\nconst whiteList = JSON.parse(process.env.REACT_APP_WHITE_LIST);\n\nconst arr = ['a@a.com','b@b.com','c@c.com'];\nconst email = 'a@a.com';\nconsole.log(R.includes(email, arr));\n\n\nfunction App() {\n  S3Config();\n  //console.log('out: '+Checkuser().username);   \n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    async function checkUser() {\n      try {\n        const currentUser = await Auth.currentUserPoolUser();\n        setUser({username: currentUser.username, ...currentUser.attributes});\n        console.log(currentUser);     \n      } catch (error) {\n        console.log(error);\n      }\n    }\n    checkUser();\n  }, []);\n\n  if(user) {\n\n    var whitelistpass = false;\n\n\n    for (var i=0;i<(whiteList.length);i++){\n\n      //console.log(i+\" \"+user.email+\" \"+whiteList[i]);\n      if(user.email===whiteList[i]){\n        // console.log('you are whitelist user!');\n        whitelistpass = true;\n      }\n    }\n    if (whitelistpass){\n      return(\n        <ListPage></ListPage>\n      );\n    }\n    else{\n      return(\n        <div className=\"app\" style={{height:\"250px\"}}>\n          <div className=\"header\">\n            <div className=\"menu-circle\"></div>\n            <div className=\"header-menu\">\n              <button href=\"#\" className=\"menu-link is-active\">Login</button>\n            </div>\n          </div>\n          <div className=\"desc\">{user.email} <br></br>You have no access! Please Login another google account!</div>\n              {/* <button className=\"logOut\" onClick = { logOff} > Logout</button> */}\n        </div>\n      );\n    }\n  } else {\n    return (\n      <LoginPage user={user}></LoginPage>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}